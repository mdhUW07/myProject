U<-runif(n=10000,min=0,max=1)
X<-rcauchy(n=10000,location = 0,scale = 1)
pi
Y<-(pi(1+X^2)exp(-X))/((1+exp(-X))^2)
Y<-(pi*(1+X^2)exp(-X))/((1+exp(-X))^2)
Y<-(pi*(1+X^2)*exp(-X))/((1+exp(-X))^2)
Y<-(pi*(1+X^2)*exp(-X))/((1+exp(-X))^2)*(1/1.652)
Z<-cbind(U,Y)
df<-as.data.frame(Z)
(df$Y)
Y_new<-if df$U <= df$Y return(df$Y)
if (df$U <= df$Y) {
x <- df$Y
}
if (df$U <= df$Y) {
x <- return(df$Y)
}
library(dplyr)
install.packages("dplyr")
library(dplyr)
df %>% dplyr::filter(U<Y)
U<-runif(n=10000,min=0,max=1)
X<-rcauchy(n=10000,location = 0,scale = 1)
Y<-(pi*(1+X^2)*exp(-X))/((1+exp(-X))^2)*(1/1.652)
Z<-cbind(U,Y)
df<-as.data.frame(Z)
df %>% dplyr::filter(U<Y)
df %>% dplyr::filter(U>.5)
df %>% dplyr::filter(df$U>.5)
df %>% dplyr::filter(df$U < .1)
df2 <- df %>% dplyr::filter(df$U < .1)
df2 <- df %>% dplyr::filter(U<Y)
x <- df2$Y
hist(x,freq = F,col="grey")
curve(dlogis(x, location = 0, scale = 1, log = FALSE))
rlogis(n=10000, location = 0, scale = 1)
logistic <- rlogis(n=10000, location = 0, scale = 1)
hist(logistic)
library(dplyr)
U<-runif(n=10000,min=0,max=1)
X<-rcauchy(n=10000,location = 0,scale = 1)
Y<-(pi*(1+X^2)*exp(-X))/((1+exp(-X))^2)*(1/1.652)
Z<-cbind(U,Y)
df<-as.data.frame(Z)
df2 <- df %>% dplyr::filter(U<Y)
x <- df2$Y
hist(x,freq = F,col="grey")
logistic <- rlogis(n=10000, location = 0, scale = 1)
hist(logistic)
sampled <-data.frame(proposal = runif(100000,0,1))
logistic <- rlogis(n=10000, location = 0, scale = 1)
hist(logistic)
sampled <-data.frame(proposal = runif(100000,0,1))
sampled$targetDensity <- dlogis(sampled$proposal,0,1)
maxDens=max(sampled$targetDensity,na.rm = T)
sampled$accepted = ifelse(runif(100000,0,1)<sampled$targetDensity)/maxDens,TRUE,FALSE)
sampled$accepted = ifelse(runif(100000,0,1) < sampled$targetDensity / maxDens, TRUE, FALSE)
hist(sampled$proposal[sampled$accepted],freq = F,col="grey",breaks = 100)
curve(dlogis(x,0,1),add = T,col="red")
sampled <-data.frame(proposal = runif(100000,0,1))
sampled$targetDensity <- dbeta(sampled$proposal,3,6)
maxDens=max(sampled$targetDensity,na.rm = T)
sampled$accepted = ifelse(runif(100000,0,1) < sampled$targetDensity / maxDens, TRUE, FALSE)
hist(sampled$proposal[sampled$accepted],freq = F,col="grey",breaks = 100)
curve(dbeta(x,3,6),add = T,col="red")
sampled <-data.frame(proposal = runif(100000,0,1))
sampled$targetDensity <- dexp(sampled$proposal,3)
maxDens=max(sampled$targetDensity,na.rm = T)
sampled$accepted = ifelse(runif(100000,0,1) < sampled$targetDensity / maxDens, TRUE, FALSE)
hist(sampled$proposal[sampled$accepted],freq = F,col="grey",breaks = 100)
curve(dexp(x,3),add = T,col="red")
sampled$targetDensity <- dexp(sampled$proposal,7)
maxDens=max(sampled$targetDensity,na.rm = T)
sampled$accepted = ifelse(runif(100000,0,1) < sampled$targetDensity / maxDens, TRUE, FALSE)
hist(sampled$proposal[sampled$accepted],freq = F,col="grey",breaks = 100)
curve(dexp(x,7),add = T,col="red")
MLE_func <- function(n,alpha){
obs <- rbeta(n=n,shape1 = alpha,shape2 = 1)
alpha_estimate <- -n/sum(log(obs))
return(alpha_estimate)
}
stat <- replicate(10000, MLE_func(100,2),simplify = TRUE)
hist(stat,freq=FALSE,xlab="Estimate of alpha parameter",main = "Maximum Likelihood Estimator")
Var_func <- function(n){
stat <- replicate(n=n, MLE_func(100,2),simplify = TRUE)
return(var(stat))
}
stat_var <- replicate(1000,Var_func(10000),simplify = TRUE)
hist(stat_var,freq = FALSE,xlab = "Variance of alpha parameter",main="MLE Variance of Parameter")
U <- runif(n=100000,min=0,max = 1)
X<-rcauchy(n=100000,location = 0,scale = 1)
Y<-1/pi*(1+x^2)
x<-seq(-10000,10000)
Y<-1/pi*(1+x^2)
x<-seq(-10,10)
Y<-1/pi*(1+x^2)
hist(Y)
library(ape)
install.packages("adegenet", dep=TRUE)
install.packages("phangorn", dep=TRUE)
library(adegenet)
needleman = function(seq1, seq2, gap, mismatch, match){
# Stop conditions
stopifnot(gap <= 0) # check if penalty negative
stopifnot(mismatch <= 0)  # check if penalty negative
stopifnot(match >= 0)  # check if score positive
# Initialize col and rownames for matrices
len1 = nchar(seq1); len2 = nchar(seq2) # Save number of chars in each sequence
seq1 = unlist(strsplit(seq1, split = "")) # convert seq to character vector
seq2 = unlist(strsplit(seq2, split = "")) # convert seq to character vector
# Initialize matrix M (for scores)
M = matrix(0, nrow = len1 + 1, ncol = len2 + 1) # Initialize matrix
rownames(M) = c("-", seq1) # assign seq chars to matrix names
colnames(M) = c("-", seq2) # assign seq chars to matrix names
M[1, ] = cumsum(c(0, rep(gap, len2))) # Fill 1st row with gap penalites
M[, 1] = cumsum(c(0, rep(gap, len1))) # Fill 1st col with gap penalites
# Initialize matrix D (for directions)
D = matrix(0, nrow = len1 + 1, ncol = len2 + 1) # Initialize matrix
rownames(D) = c("-", seq1) # assign seq chars to matrix names
colnames(D) = c("-", seq2) # assign seq chars to matrix names
D[1, ] = rep("hor") # Fill 1st row with "hor" for horizontal moves
D[, 1] = rep("ver") # Fill 1st col with "ver" for vertical moves
type = c("dia", "hor", "ver") # Lookup vector
# Compute scores and save moves
for (i in 2:(len1 + 1)){# for every (initially zero) row
for (j in 2:(len2 + 1)){# for every (initially zero) col
hor = M[i, j - 1] + gap # horizontal move = gap for seq1
ver = M[i - 1, j] + gap # vertical move = gap for seq2
dia = ifelse(rownames(M)[i] == colnames(M)[j], # diagonal = ifelse(chars equal, match, mismatch)
M[i - 1, j - 1] + match,
M[i - 1, j - 1] + mismatch)
M[i, j] = max(dia, hor, ver) # Save current (best) score in M
D[i, j] = type[which.max(c(dia, hor, ver))] # Save direction of move in D
}
}
# Backtracing
align1 = c(); align2 = c() # Note: length of final alignments is unknown at this point
while(i > 1 && j > 1){
if(D[i, j] == "dia") {
align1 = c(rownames(M)[i], align1)
align2 = c(colnames(M)[j], align2)
j = j - 1; i = i - 1  # update indices
} else if (D[i, j] == "ver") {
align1 = c(rownames(M)[i], align1)
align2 = c("-", align2) # vertical movement = gap for seq2
i = i - 1 # update indices
} else if (D[i, j] == "hor") {
align1 = c("-", align1) # horizontal movement = gap for seq1
align2 = c(colnames(M)[j], align2)
j = j - 1 # update indices
}
}
# Prepare output
return(list(aligned_seqs = matrix(c(align1, align2), byrow = TRUE, nrow = 2),
score = M[nrow(M), ncol(M)], score_matrix = M, movement_matrix = D))
}
# Test case 1: Wiki example (https://de.wikipedia.org/wiki/Needleman-Wunsch-Algorithmus)
testthat::test_that("needlemanreturns correct alignment", {
solution = needleman("ACGTC", "AGTC", gap = -1, mismatch = -1, match = 0)$aligned_seqs
expected = matrix(c("A", "C", "G", "T", "C",
"A", "-", "G", "T", "C"), byrow = TRUE, nrow =2)
testthat::expect_equal(solution, expected)
})
# Test case 2: Problem 2.9 (M. Borodovsky, S. Ekisheva., 2006,
# Problems and Solutions in Biological Sequence Anal- ysis, Cambridge University Press)
testthat::test_that("needlemanreturns correct alignment", {
solution = needleman("GAATTC", "GATTA", gap = -2, mismatch = -1, match = 2)$aligned_seqs
expected = matrix(c("G", "A", "A", "T", "T", "C",
"G", "-", "A", "T", "T", "A"), byrow = TRUE, nrow =2)
testthat::expect_equal(solution, expected)
})
# Test case 3: Fig. 5-7 (J. Momand, A. McCurdy., 2017, Concepts in Bioinformatics
# and Genomics, Oxford Uni- versity Press.)
testthat::test_that("needlemanreturns correct alignment", {
solution = needleman("ADCDNRCKCRWP", "AWCNDRQCLCRP",
gap = 0, mismatch = 0, match = 1)$aligned_seqs
expected = matrix(c("A","D","C","D","N","-","R","-","C","K","C","R","W","P",
"A","W","C","-","N","D","R","Q","C","L","C","R","-","P"),
byrow = TRUE, nrow =2)
testthat::expect_equal(solution, expected)
})
# Test case 4: Ch. 5, Problem 5 MODIFIED (!) (J. Momand, A. McCurdy., 2017, Concepts in
# Bioinformatics and Genomics, Oxford Uni- versity Press.)
testthat::test_that("needlemanreturns correct alignment", {
solution = needleman("ATAGC", "ATATGA", gap = 0, mismatch = 0, match = 1)$aligned_seqs
expected = matrix(c("A","T","A","-","G","C" ,
"A","T","A","T","G","A"), byrow = TRUE, nrow =2)
testthat::expect_equal(solution, expected)
})
library(pegas)
#Distance based methods
library(ape)
library(adegenet)
install.packages("phangorn",dep=TRUE)
library(phangorn)
library(pegasus)
library(pegas)
dna <- fasta2DNAbin(file="outfile.fas")
setwd("~/Desktop/myProject/alignmentmethods")
setwd("~/Desktop/myProject/data")
dna <- fasta2DNAbin(file="outfile.fas")
#Haplotype network
h <- haplotype(dna)
h
#Individuals belong to the 1st halpotype
attr(h, "index")[[1]]
plot(sort(h))
alview(dna)
dist.dna(x, "N", p = "TRUE")
dist.dna(dna, "N", p = "TRUE")
haploNet(h)
hN <- haploNet(h)
print(hN)
plot(hN, size = attr(hN,"freq"), scale.ratio =2, cex = 0.6, labels = TRUE, pie = ind.hap, show.mutation = 1, font = 2, fast = TRUE)
plot(hN, size = attr(hN,"freq"), scale.ratio =2, cex = 0.6, labels = TRUE, show.mutation = 1, font = 2, fast = TRUE)
hN
plot(h)
as.network.haploNet(dna)
pegas::as.network.haploNet(h)
pegas::as.network(h)
as.data.frame(diffHaplo(h,1:15))
HapTyp_DF = as.data.frame(diffHaplo(h,1:20))
View(HapTyp_DF)
HapTyp_DF = t(HapTyp_DF)
View(HapTyp_DF)
HapTyp_DF = as.data.frame(diffHaplo(h,1:20,strict = FALSE))
HapTyp_DF = t(HapTyp_DF)
View(HapTyp_DF)
print(h)
h
hN
h[1:20,1]
h[1:20,2]
h
